/**
   * @license
   * W.js v1.0.0
   * Released under the MIT License.
   */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).W=e()}(this,function(){"use strict";function t(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=Array(e);n<e;n++)o[n]=t[n];return o}function e(t,e,n){return e=u(e),s(t,c()?Reflect.construct(e,n||[],u(t).constructor):e.apply(t,n))}function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,l(o.key),o)}}function r(t,e,n){return e&&o(t.prototype,e),n&&o(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function i(e,n){var o="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!o){if(Array.isArray(e)||(o=function(e,n){if(e){if("string"==typeof e)return t(e,n);var o={}.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){o&&(e=o);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var u,a=!0,c=!1;return{s:function(){o=o.call(e)},n:function(){var t=o.next();return a=t.done,t},e:function(t){c=!0,u=t},f:function(){try{a||null==o.return||o.return()}finally{if(c)throw u}}}}function u(t){return u=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},u(t)}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&f(t,e)}function c(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(t){}return(c=function(){return!!t})()}function s(t,e){if(e&&("object"==typeof e||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function f(t,e){return f=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},f(t,e)}function l(t){var e=function(t,e){if("object"!=typeof t||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,e||"default");if("object"!=typeof o)return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==typeof e?e:e+""}var h={},p=function(t,e){h[t]=e},v=function(t,e,n,o){return t in h?new h[t](t,e,n,o):null},d="data-component",m=function(){return r(function t(e,o,r,i){n(this,t),this.name=e,this.el=o,this.app=r,this.parent=i,this.children=[],this.complete=!0,this.loadCallbacks=[]},[{key:"loadChildren",value:function(t,e){var n=this,o=this.el.querySelectorAll("["+d+"]");if(!o||!o.length)return t();var r=o.length,i=0;o.forEach(function(o){var u=o.getAttribute(d),a=v(u,o,n.app,n);a?(n.children.push(a),a.load(function(){++i===r&&t()},e)):++i===r&&t()})}},{key:"load",value:function(t,e){var n=this;t&&this.loadCallbacks.push(t),this.complete&&(e=e||{},this.complete=!1,this.getData(function(t){n.getTemplate(function(o){n.el.innerHTML=o(t),n.children.forEach(function(t){t.destroyed()}),n.children=[],n.rendered(function(){n.loadChildren(function(){n.complete=!0,n.loadCallbacks.forEach(function(t){t()}),n.loadCallbacks=[]},e)},e)})},e))}},{key:"destroyed",value:function(){this.children.forEach(function(t){t.destroyed()}),this.children=[],this.app.eventBus.remove(this),this.cleanup()}},{key:"getData",value:function(t){t&&t(this.data||{})}},{key:"getTemplate",value:function(t){t&&t(this.template||function(){return""})}},{key:"rendered",value:function(t){t&&t()}},{key:"cleanup",value:function(){}}])}();var y=/^#([^\/]+)/,b=function(){return r(function t(e,o,r,i){var u=this;n(this,t),this.name=e,this.el=o,this.app=r,this.parent=i,this.currentComponent=null,this.defaultComponentName=o.getAttribute("data-default"),this.app.nav.on(function(){u.load()},this)},[{key:"getComponentName",value:function(t){var e=y.exec(t),n=e&&e[1]||"";return n in this.knownComponents?this.knownComponents[n]:this.defaultComponentName}},{key:"load",value:function(t,e){var n=this,o=this.getComponentName(location.hash);if(o&&(!this.currentComponent||this.currentComponent.name!==o)){var r=v(o,this.el,this.app,this);if(!r)return t();r.load(function(){n.currentComponent&&n.currentComponent.destroyed(),n.currentComponent=r,n.el.setAttribute("data-current",o),t&&t()},e)}}},{key:"destroyed",value:function(){this.currentComponent&&this.currentComponent.destroyed(),this.currentComponent=null,this.app.eventBus.remove(this)}}])}();var g="data.updated.",k="app.popstate",w=function(){return r(function t(){n(this,t),this.events=new Map},[{key:"getOrCreate",value:function(t){return this.events.has(t)||this.events.set(t,new Map),this.events.get(t)}},{key:"emit",value:function(t,e,n){var o,r=i(this.getOrCreate(t).values());try{for(r.s();!(o=r.n()).done;){(0,o.value)(e,n)}}catch(t){r.e(t)}finally{r.f()}}},{key:"on",value:function(t,e,n){this.getOrCreate(t).set(n,e)}},{key:"off",value:function(t,e){this.events.has(t)&&this.events.get(t).delete(e)}},{key:"remove",value:function(t){var e,n=i(this.events.values());try{for(n.s();!(e=n.n()).done;){e.value.delete(t)}}catch(t){n.e(t)}finally{n.f()}}}])}(),C=function(){return r(function t(e){n(this,t),this.eventBus=e,this.store=new Map},[{key:"get",value:function(t){return this.store.get(t).value}},{key:"register",value:function(t,e){this.store.set(t,{value:null,fetch:e})}},{key:"_fetch",value:function(t,e){var n=this.store.get(t);n.fetch(function(t){n.value=t,e(t)})}},{key:"refresh",value:function(t){var e=this;this._fetch(t,function(n){e.eventBus.emit(g+t,n,e)})}},{key:"fetch",value:function(t,e){var n=this,o=t.length,r={};t.forEach(function(t){n._fetch(t,function(n){r[t]=n,Object.keys(r).length===o&&e(r)})})}},{key:"on",value:function(t,e,n){this.eventBus.on(g+t,e,n)}},{key:"emit",value:function(t,e,n){this.eventBus.emit(g+t,e,n)}}])}(),O=function(){return r(function t(e){var o=this;n(this,t),this.eventBus=e,window.addEventListener("popstate",function(t){o.eventBus.emit(k,t,o)})},[{key:"on",value:function(t,e){this.eventBus.on(k,t,e)}}])}(),j=function(){return r(function t(e,o){n(this,t),this.name=e,this.getTemplate=o,this.eventBus=new w,this.nav=new O(this.eventBus),this.data=new C(this.eventBus)},[{key:"start",value:function(t,e){new m("",t,this).loadChildren(function(){},e)}}])}();return{app:function(t,e){return new j(t,e)},component:function(t,o){p(t,function(t){function i(t,r,u,a){var c;return n(this,i),c=e(this,i,[t,r,u,a]),o?(o.init&&o.init.bind(c)(),o.template?c.template=o.template:u.getTemplate&&(c.getTemplate=function(t){u.getTemplate(c.name,t)}),o.getData&&(c.getData=o.getData.bind(c)),o.rendered&&(c.rendered=o.rendered.bind(c)),o.cleanup&&(c.cleanup=o.cleanup.bind(c)),c):(u.getTemplate&&(c.getTemplate=function(t){u.getTemplate(c.name,t)}),s(c))}return a(i,t),r(i)}(m))},switch:function(t,o){p(t,function(t){function i(t,r,u,a){var c;return n(this,i),c=e(this,i,[t,r,u,a]),o?(o.knownComponents&&(c.knownComponents=o.knownComponents),o.getComponentName&&(c.getComponentName=o.getComponentName.bind(c)),c):s(c)}return a(i,t),r(i)}(b))}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
