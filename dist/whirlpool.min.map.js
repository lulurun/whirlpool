/**
   * @license
   * W.js v1.0.0
   * Released under the MIT License.
   */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).W=e()}(this,function(){"use strict";function t(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=Array(e);n<e;n++)r[n]=t[n];return r}function e(t,e,n){return e=u(e),c(t,s()?Reflect.construct(e,n||[],u(t).constructor):e.apply(t,n))}function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,f(r.key),r)}}function o(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function i(e,n){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,n){if(e){if("string"==typeof e)return t(e,n);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){r&&(e=r);var o=0,i=function(){};return{s:i,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var u,a=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var t=r.next();return a=t.done,t},e:function(t){s=!0,u=t},f:function(){try{a||null==r.return||r.return()}finally{if(s)throw u}}}}function u(t){return u=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},u(t)}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&l(t,e)}function s(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(t){}return(s=function(){return!!t})()}function c(t,e){if(e&&("object"==typeof e||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function l(t,e){return l=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},l(t,e)}function f(t){var e=function(t,e){if("object"!=typeof t||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,e||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==typeof e?e:e+""}var p={},h=function(t,e){p[t]=e},d=function(t,e,n,r){return t in p?new p[t](t,e,n,r):null},y="data-component",b=function(){return o(function t(e,r,o,i){n(this,t),this.name=e,this.el=r,this.app=o,this.parent=i,this.children=[],this.topics=[]},[{key:"loadChildren",value:function(t,e){var n=this,r=this.el.querySelectorAll("["+y+"]");if(!r||!r.length)return t();var o=r.length,i=0;r.forEach(function(r){var u=r.getAttribute(y),a=d(u,r,n.app,n);a?(n.children.push(a),a.load(function(){++i===o&&t()},e)):++i===o&&t()})}},{key:"load",value:function(t,e){var n=this;e=e||{},this.complete=!1,this.getData(function(r){n.getTemplate(function(o){n.el.innerHTML=o(r),n.children.forEach(function(t){t.destroyed()}),n.children=[],n.rendered(function(){n.loadChildren(function(){n.complete=!0,t&&t()},e)},e)})},e)}},{key:"destroyed",value:function(){var t=this;this.children.forEach(function(t){t.destroyed()}),this.children=[],this.topics.forEach(function(e){t.app.unsubscribe(e,t)}),this.topics=[],this.cleanup()}},{key:"subscribe",value:function(t,e){this.app.subscribe(t,e,this),this.topics.push(t)}},{key:"publish",value:function(t,e){this.app.publish(t,e,this)}},{key:"getData",value:function(t){t&&t(this.data||{})}},{key:"getTemplate",value:function(t){t&&t(this.template||function(){return""})}},{key:"rendered",value:function(t){t&&t()}},{key:"cleanup",value:function(){}}])}();var m=/^#([0-9a-zA-Z_\-\/\.]+)/,v=function(){return o(function t(e,r,o,i){n(this,t),this.name=e,this.el=r,this.app=o,this.parent=i,this.currentComponent=null,this.defaultComponentName=r.getAttribute("data-default"),this.app.switches.add(this)},[{key:"getComponentName",value:function(t){var e=m.exec(t),n=e&&e[1]||"";return n in this.knownComponents?this.knownComponents[n]:this.defaultComponentName}},{key:"load",value:function(t,e){var n=this,r=this.getComponentName(location.hash);if(!this.currentComponent||this.currentComponent.name!==r){var o=d(r,this.el,this.app,this);if(!o)return t();o.load(function(){n.currentComponent&&n.currentComponent.destroyed(),n.currentComponent=o,n.el.setAttribute("data-current",r),n.app.publish("switch."+n.name+".updated",r),t()},e)}}},{key:"destroyed",value:function(){this.currentComponent&&this.currentComponent.destroyed(),this.currentComponent=null,this.app.swithes.delete(this)}}])}();function g(t,e){return t.has(e)||t.set(e,{subscribers:new Map}),t.get(e)}var w=function(){return o(function t(e,r){n(this,t),this.name=e,this.getTemplate=r,this.topics=new Map,this.switches=new Set,this.stores=new Map},[{key:"start",value:function(t,e){var n=this;window.addEventListener("popstate",function(t){n.switches.forEach(function(t){t.load(function(){})})}),new b("",t,this).loadChildren(function(){},e)}},{key:"publish",value:function(t,e,n){var r,o=g(this.topics,t),u=i(o.subscribers.values());try{for(u.s();!(r=u.n()).done;){(0,r.value)(e,n)}}catch(t){u.e(t)}finally{u.f()}o.data=e,o.publisher=n,o.available=!0}},{key:"subscribe",value:function(t,e,n){var r=g(this.topics,t);r.subscribers.set(n,e),r.available&&e(r.data,r.publisher)}},{key:"unsubscribe",value:function(t,e){this.topics.has(t)&&this.topics.get(t).subscribers.delete(e)}},{key:"setData",value:function(t,e){this.stores.set(t,e),this.publish("data."+t+".updated",e)}},{key:"getData",value:function(t){return this.stores.get(t)}}])}();return{app:function(t,e){return new w(t,e)},component:function(t,r){h(t,function(t){function i(t,o,u,a){var s;return n(this,i),s=e(this,i,[t,o,u,a]),r?(r.init&&r.init.bind(s)(),r.template?s.template=r.template:u.getTemplate&&(s.getTemplate=function(t){u.getTemplate(s.name,t)}),r.getData&&(s.getData=r.getData.bind(s)),r.rendered&&(s.rendered=r.rendered.bind(s)),r.cleanup&&(s.cleanup=r.cleanup.bind(s)),s):(u.getTemplate&&(s.getTemplate=function(t){u.getTemplate(s.name,t)}),c(s))}return a(i,t),o(i)}(b))},switch:function(t,r){h(t,function(t){function i(t,o,u,a){var s;return n(this,i),s=e(this,i,[t,o,u,a]),r?(r.knownComponents&&(s.knownComponents=r.knownComponents),r.getComponentName&&r.getComponentName.bind(s)(),s):c(s)}return a(i,t),o(i)}(v))}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
