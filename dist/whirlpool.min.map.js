/**
   * @license
   * W.js v1.0.0
   * Released under the MIT License.
   */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).W=e()}(this,function(){"use strict";function t(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=Array(e);n<e;n++)r[n]=t[n];return r}function e(t,e,n){return e=u(e),s(t,c()?Reflect.construct(e,n||[],u(t).constructor):e.apply(t,n))}function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,l(r.key),r)}}function o(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function i(e,n){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,n){if(e){if("string"==typeof e)return t(e,n);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(e))||n&&e&&"number"==typeof e.length){r&&(e=r);var o=0,i=function(){};return{s:i,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var u,a=!0,c=!1;return{s:function(){r=r.call(e)},n:function(){var t=r.next();return a=t.done,t},e:function(t){c=!0,u=t},f:function(){try{a||null==r.return||r.return()}finally{if(c)throw u}}}}function u(t){return u=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},u(t)}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&f(t,e)}function c(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(t){}return(c=function(){return!!t})()}function s(t,e){if(e&&("object"==typeof e||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function f(t,e){return f=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},f(t,e)}function l(t){var e=function(t,e){if("object"!=typeof t||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,e||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==typeof e?e:e+""}var h={},p=function(t,e){h[t]=e},v=function(t,e,n,r){return t in h?new h[t](t,e,n,r):null},d="data-component",y=function(){return o(function t(e,r,o,i){n(this,t),this.name=e,this.el=r,this.app=o,this.parent=i,this.children=[]},[{key:"loadChildren",value:function(t,e){var n=this,r=this.el.querySelectorAll("["+d+"]");if(!r||!r.length)return t();var o=r.length,i=0;r.forEach(function(r){var u=r.getAttribute(d),a=v(u,r,n.app,n);a?(n.children.push(a),a.load(function(){++i===o&&t()},e)):++i===o&&t()})}},{key:"load",value:function(t,e){var n=this;e=e||{},this.complete=!1,this.getData(function(r){n.getTemplate(function(o){n.el.innerHTML=o(r),n.children.forEach(function(t){t.destroyed()}),n.children=[],n.rendered(function(){n.loadChildren(function(){n.complete=!0,t&&t()},e)},e)})},e)}},{key:"destroyed",value:function(){this.children.forEach(function(t){t.destroyed()}),this.children=[],this.app.eventBus.remove(this),this.cleanup()}},{key:"getData",value:function(t){t&&t(this.data||{})}},{key:"getTemplate",value:function(t){t&&t(this.template||function(){return""})}},{key:"rendered",value:function(t){t&&t()}},{key:"cleanup",value:function(){}}])}();var m=/^#([^\/]+)/,b=function(){return o(function t(e,r,o,i){var u=this;n(this,t),this.name=e,this.el=r,this.app=o,this.parent=i,this.currentComponent=null,this.defaultComponentName=r.getAttribute("data-default"),this.app.nav.on(function(){u.load()})},[{key:"getComponentName",value:function(t){var e=m.exec(t),n=e&&e[1]||"";return n in this.knownComponents?this.knownComponents[n]:this.defaultComponentName}},{key:"load",value:function(t,e){var n=this,r=this.getComponentName(location.hash);if(!this.currentComponent||this.currentComponent.name!==r){var o=v(r,this.el,this.app,this);if(!o)return t();o.load(function(){n.currentComponent&&n.currentComponent.destroyed(),n.currentComponent=o,n.el.setAttribute("data-current",r),t()},e)}}},{key:"destroyed",value:function(){this.currentComponent&&this.currentComponent.destroyed(),this.currentComponent=null,this.app.unsubscribe(POPSTATE_EVENT,this)}}])}();var g="data.updated.",w="app.popstate",k=function(){return o(function t(){n(this,t),this.events=new Map},[{key:"getOrCreate",value:function(t){return this.events.has(t)||this.events.set(t,new Map),this.events.get(t)}},{key:"emit",value:function(t,e,n){var r,o=i(this.getOrCreate(t).values());try{for(o.s();!(r=o.n()).done;){(0,r.value)(e,n)}}catch(t){o.e(t)}finally{o.f()}}},{key:"on",value:function(t,e,n){this.getOrCreate(t).set(n,e)}},{key:"off",value:function(t,e){this.events.has(t)&&this.events.get(t).delete(e)}},{key:"remove",value:function(t){var e,n=i(this.events.values());try{for(n.s();!(e=n.n()).done;){e.value.delete(t)}}catch(t){n.e(t)}finally{n.f()}}}])}(),C=function(){return o(function t(e){n(this,t),this.eventBus=e,this.store=new Map},[{key:"get",value:function(t){return this.store.get(t).value}},{key:"register",value:function(t,e){this.store.set(t,{value:null,fetch:e})}},{key:"_fetch",value:function(t,e){var n=this.store.get(t);n.fetch(function(t){n.value=t,e(t)})}},{key:"refresh",value:function(t){var e=this;this._fetch(t,function(n){e.eventBus.emit(g+t,n,e)})}},{key:"fetch",value:function(t,e){var n=this,r=t.length,o={};t.forEach(function(t){n._fetch(t,function(n){o[t]=n,Object.keys(o).length===r&&e(o)})})}},{key:"on",value:function(t,e,n){this.eventBus.on(g+t,e,n)}},{key:"emit",value:function(t,e,n){this.eventBus.emit(g+t,e,n)}}])}(),O=function(){return o(function t(e){var r=this;n(this,t),this.eventBus=e,window.addEventListener("popstate",function(t){r.eventBus.emit(w,t,r)})},[{key:"on",value:function(t,e){this.eventBus.on(w,t,e)}}])}(),T=function(){return o(function t(e,r){n(this,t),this.name=e,this.getTemplate=r,this.eventBus=new k,this.nav=new O(this.eventBus),this.data=new C(this.eventBus)},[{key:"start",value:function(t,e){new y("",t,this).loadChildren(function(){},e)}}])}();return{app:function(t,e){return new T(t,e)},component:function(t,r){p(t,function(t){function i(t,o,u,a){var c;return n(this,i),c=e(this,i,[t,o,u,a]),r?(r.init&&r.init.bind(c)(),r.template?c.template=r.template:u.getTemplate&&(c.getTemplate=function(t){u.getTemplate(c.name,t)}),r.getData&&(c.getData=r.getData.bind(c)),r.rendered&&(c.rendered=r.rendered.bind(c)),r.cleanup&&(c.cleanup=r.cleanup.bind(c)),c):(u.getTemplate&&(c.getTemplate=function(t){u.getTemplate(c.name,t)}),s(c))}return a(i,t),o(i)}(y))},switch:function(t,r){p(t,function(t){function i(t,o,u,a){var c;return n(this,i),c=e(this,i,[t,o,u,a]),r?(r.knownComponents&&(c.knownComponents=r.knownComponents),r.getComponentName&&(c.getComponentName=r.getComponentName.bind(c)),c):s(c)}return a(i,t),o(i)}(b))}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
