/**
   * @license
   * W.js v2.0.1
   * Released under the MIT License.
   */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).W=e()}(this,(function(){"use strict";function t(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function e(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function n(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}function i(t){return i=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},i(t)}function o(t,e){return o=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},o(t,e)}function r(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function c(t,e){if(e&&("object"==typeof e||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return r(t)}function u(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,o=i(t);if(e){var r=i(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return c(this,n)}}var f={},a=function(){function e(n,i,o,r){t(this,e),this.name=n,this.el=i,this.app=o,this.complete=!1,this.parent=r,this.children=[],this.topics=[]}return n(e,[{key:"render",value:function(t,e,n){this.el.innerHTML=e(t),this.children.forEach((function(t){t.destroyed()})),this.children=[]}},{key:"loadChildren",value:function(t,e){var n=this,i=this.el.querySelectorAll("[data-component]");if(!i||!i.length)return t();var o=i.length,r=0;i.forEach((function(i){var c=i.getAttribute("data-component"),u=new(0,f[c])(c,i,n.app,n);n.children.push(u),u.load((function(){++r===o&&t()}),e)}))}},{key:"load",value:function(t,e){var n=this;e=e||{},this.complete=!1,this.getData((function(i){n.render(i,n.template,e),n.rendered((function(){n.loadChildren((function(){n.complete=!0,t&&t()}),e)}),e)}),e)}},{key:"destroyed",value:function(){var t=this;this.children.forEach((function(t){t.destroyed()})),this.children=[],this.topics.forEach((function(e){t.app.off(e,t)})),this.topics=[]}},{key:"on",value:function(t,e){this.app.on(t,e,this),this.topics.push(t)}},{key:"getData",value:function(t){t&&t(this.data||{})}},{key:"rendered",value:function(t){t&&t()}}]),e}();var s=function(){function e(n){t(this,e),this.name=n,this.topics={}}return n(e,[{key:"start",value:function(t,e){var n=this;window.addEventListener("popstate",(function(t){n.trigger("popstate",t)})),new a("",t,this).loadChildren((function(){}),e)}},{key:"trigger",value:function(t,e,n){if(t in this.topics)for(var i in this.topics[t])this.topics[t][i](t,e,n)}},{key:"on",value:function(t,e,n){t in this.topics||(this.topics[t]={}),this.topics[t][n]=e}},{key:"off",value:function(t,e){if(t in this.topics){var n=this.topics[t];delete n[e],0===n.length&&delete this.topics[t]}}}]),e}();return{app:function(t){return new s(t)},component:function(e,n){var i=function(e){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&o(t,e)}(c,e);var i=u(c);function c(e,o,u){var f;return t(this,c),f=i.call(this,e,o,u),n.template&&(f.template=n.template),n.init&&n.init.bind(r(f))(),n.getData&&(f.getData=n.getData.bind(r(f))),n.rendered&&(f.rendered=n.rendered.bind(r(f))),f}return c}(a);f[e]=i}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2hpcmxwb29sLm1pbi5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbXBvbmVudC5qcyIsIi4uL3NyYy9hcHAuanMiLCIuLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qga25vd25Db21wb25lbnRDbGFzc2VzID0ge307XG5cbmV4cG9ydCBjbGFzcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihuYW1lLCBlbCwgYXBwLCBwYXJlbnQpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuZWwgPSBlbDtcbiAgICB0aGlzLmFwcCA9IGFwcDtcbiAgICB0aGlzLmNvbXBsZXRlID0gZmFsc2U7XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgIHRoaXMudG9waWNzID0gW107XG4gIH1cblxuICByZW5kZXIoZGF0YSwgdGVtcGxhdGUsIHBhcmFtKSB7XG4gICAgdGhpcy5lbC5pbm5lckhUTUwgPSB0ZW1wbGF0ZShkYXRhKTtcbiAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goYyA9PiB7XG4gICAgICBjLmRlc3Ryb3llZCgpO1xuICAgIH0pO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgfVxuXG4gIGxvYWRDaGlsZHJlbihjYiwgcGFyYW0pIHtcbiAgICBjb25zdCBlbHMgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWNvbXBvbmVudF0nKTtcbiAgICBpZiAoIWVscyB8fCAhZWxzLmxlbmd0aClcbiAgICAgIHJldHVybiBjYigpO1xuXG4gICAgY29uc3QgbGVuID0gZWxzLmxlbmd0aDtcbiAgICBsZXQgbmJDb21wbGV0ZSA9IDA7XG4gICAgZWxzLmZvckVhY2goZWwgPT4ge1xuICAgICAgY29uc3QgbmFtZSA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1jb21wb25lbnQnKTtcbiAgICAgIGNvbnN0IENsYXNzID0ga25vd25Db21wb25lbnRDbGFzc2VzW25hbWVdO1xuICAgICAgY29uc3QgYyA9IG5ldyBDbGFzcyhuYW1lLCBlbCwgdGhpcy5hcHAsIHRoaXMpO1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGMpO1xuICAgICAgYy5sb2FkKCgpID0+IHtcbiAgICAgICAgaWYgKCsrbmJDb21wbGV0ZSA9PT0gbGVuKVxuICAgICAgICAgIGNiKCk7XG4gICAgICB9LCBwYXJhbSk7XG4gICAgfSk7XG4gIH1cblxuICBsb2FkKGNiLCBwYXJhbSkge1xuICAgIHBhcmFtID0gcGFyYW0gfHwge307XG4gICAgdGhpcy5jb21wbGV0ZSA9IGZhbHNlO1xuICAgIHRoaXMuZ2V0RGF0YShkYXRhID0+IHtcbiAgICAgIHRoaXMucmVuZGVyKGRhdGEsIHRoaXMudGVtcGxhdGUsIHBhcmFtKTtcbiAgICAgIHRoaXMucmVuZGVyZWQoKCkgPT4ge1xuICAgICAgICB0aGlzLmxvYWRDaGlsZHJlbigoKSA9PiB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgaWYgKGNiKSBjYigpO1xuICAgICAgICB9LCBwYXJhbSlcbiAgICAgIH0sIHBhcmFtKTtcbiAgICB9LCBwYXJhbSlcbiAgfVxuXG4gIGRlc3Ryb3llZCgpIHtcbiAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goYyA9PiB7XG4gICAgICBjLmRlc3Ryb3llZCgpO1xuICAgIH0pO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB0aGlzLnRvcGljcy5mb3JFYWNoKHRvcGljID0+IHtcbiAgICAgIHRoaXMuYXBwLm9mZih0b3BpYywgdGhpcyk7XG4gICAgfSlcbiAgICB0aGlzLnRvcGljcyA9IFtdO1xuICB9XG5cbiAgb24odG9waWMsIGNiKSB7XG4gICAgdGhpcy5hcHAub24odG9waWMsIGNiLCB0aGlzKTtcbiAgICB0aGlzLnRvcGljcy5wdXNoKHRvcGljKTtcbiAgfVxuXG4gIC8vIFRoZXNlIDIgbWV0aG9kcyBhcmUgdG8gYmUgb3ZlcnJpZGVkIGJ5IGVhY2ggY29tcG9uZW50XG4gIGdldERhdGEoY2IpIHtcbiAgICBpZiAoY2IpIGNiKHRoaXMuZGF0YSB8fCB7fSk7XG4gIH1cblxuICByZW5kZXJlZChjYikge1xuICAgIGlmIChjYikgY2IoKTtcbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyQ29tcG9uZW50KG5hbWUsIGRlZikge1xuICBjb25zdCBjbHMgPSBjbGFzcyBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IobmFtZSwgZWwsIHBhcmVudCkge1xuICAgICAgc3VwZXIobmFtZSwgZWwsIHBhcmVudCk7XG4gICAgICBpZiAoZGVmLnRlbXBsYXRlKSB7XG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSBkZWYudGVtcGxhdGU7XG4gICAgICB9XG4gICAgICBpZiAoZGVmLmluaXQpIHtcbiAgICAgICAgZGVmLmluaXQuYmluZCh0aGlzKSgpO1xuICAgICAgfVxuICAgICAgaWYgKGRlZi5nZXREYXRhKSB7XG4gICAgICAgIHRoaXMuZ2V0RGF0YSA9IGRlZi5nZXREYXRhLmJpbmQodGhpcyk7XG4gICAgICB9XG4gICAgICBpZiAoZGVmLnJlbmRlcmVkKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZWQgPSBkZWYucmVuZGVyZWQuYmluZCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAga25vd25Db21wb25lbnRDbGFzc2VzW25hbWVdID0gY2xzO1xufTtcbiIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBwIHtcbiAgY29uc3RydWN0b3IobmFtZSkge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy50b3BpY3MgPSB7fTtcbiAgfVxuXG4gIHN0YXJ0KGVsLCBwYXJhbSkge1xuICAgIC8vIFRPRE86IHJlbW92ZUV2ZW50TGlzdGVuZXIgc29tZSB3aGVyZVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIChldikgPT4ge1xuICAgICAgdGhpcy50cmlnZ2VyKCdwb3BzdGF0ZScsIGV2KTtcbiAgICB9KTtcbiAgICBjb25zdCByb290ID0gbmV3IENvbXBvbmVudCgnJywgZWwsIHRoaXMpO1xuICAgIHJvb3QubG9hZENoaWxkcmVuKCgpID0+IHt9LCBwYXJhbSk7XG4gIH1cblxuICB0cmlnZ2VyKHRvcGljLCBkYXRhLCBwdWJsaXNoZXIpIHtcbiAgICBpZiAoISh0b3BpYyBpbiB0aGlzLnRvcGljcykpXG4gICAgICByZXR1cm47XG4gICAgZm9yIChsZXQgcyBpbiB0aGlzLnRvcGljc1t0b3BpY10pIHtcbiAgICAgIHRoaXMudG9waWNzW3RvcGljXVtzXSh0b3BpYywgZGF0YSwgcHVibGlzaGVyKTtcbiAgICB9XG4gIH1cblxuICBvbih0b3BpYywgY2IsIHN1YnNjcmliZXIpIHtcbiAgICBpZiAoISh0b3BpYyBpbiB0aGlzLnRvcGljcykpXG4gICAgICB0aGlzLnRvcGljc1t0b3BpY10gPSB7fTtcbiAgICB0aGlzLnRvcGljc1t0b3BpY11bc3Vic2NyaWJlcl0gPSBjYjtcbiAgfVxuXG4gIG9mZih0b3BpYywgc3Vic2NyaWJlcikge1xuICAgIGlmICghKHRvcGljIGluIHRoaXMudG9waWNzKSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBzdWJzY3JpYmVycyA9IHRoaXMudG9waWNzW3RvcGljXTtcbiAgICBkZWxldGUgc3Vic2NyaWJlcnNbc3Vic2NyaWJlcl07XG4gICAgaWYgKHN1YnNjcmliZXJzLmxlbmd0aCA9PT0gMClcbiAgICAgIGRlbGV0ZSB0aGlzLnRvcGljc1t0b3BpY107XG4gIH1cbn07XG5cbiIsImltcG9ydCB7IENvbXBvbmVudCwgcmVnaXN0ZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgQXBwIGZyb20gJy4vYXBwLmpzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAvLyBlbnRyeSBwb2ludCB0byBraWNrLW9mZiB0aGUgYXBwbGljYXRpb25cbiAgYXBwOiAobmFtZSkgPT4ge1xuICAgIHJldHVybiBuZXcgQXBwKG5hbWUpO1xuICB9LFxuICBjb21wb25lbnQ6IHJlZ2lzdGVyQ29tcG9uZW50LFxufTtcbiJdLCJuYW1lcyI6WyJrbm93bkNvbXBvbmVudENsYXNzZXMiLCJDb21wb25lbnQiLCJuYW1lIiwiZWwiLCJhcHAiLCJwYXJlbnQiLCJjb21wbGV0ZSIsImNoaWxkcmVuIiwidG9waWNzIiwiZGF0YSIsInRlbXBsYXRlIiwicGFyYW0iLCJpbm5lckhUTUwiLCJmb3JFYWNoIiwiYyIsImRlc3Ryb3llZCIsImNiIiwiZWxzIiwidGhpcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsZW5ndGgiLCJsZW4iLCJuYkNvbXBsZXRlIiwiZ2V0QXR0cmlidXRlIiwiQ2xhc3MiLCJfdGhpcyIsInB1c2giLCJsb2FkIiwiZ2V0RGF0YSIsIl90aGlzMiIsInJlbmRlciIsInJlbmRlcmVkIiwibG9hZENoaWxkcmVuIiwidG9waWMiLCJfdGhpczMiLCJvZmYiLCJvbiIsIkFwcCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJldiIsInRyaWdnZXIiLCJwdWJsaXNoZXIiLCJzIiwic3Vic2NyaWJlciIsInN1YnNjcmliZXJzIiwiY29tcG9uZW50IiwiZGVmIiwiY2xzIiwiaW5pdCIsImJpbmQiXSwibWFwcGluZ3MiOiI7Ozs7O285Q0FBQSxJQUFNQSxFQUF3QixHQUVqQkMsd0JBQ0NDLEVBQU1DLEVBQUlDLEVBQUtDLGtCQUNwQkgsS0FBT0EsT0FDUEMsR0FBS0EsT0FDTEMsSUFBTUEsT0FDTkUsVUFBVyxPQUNYRCxPQUFTQSxPQUNURSxTQUFXLFFBQ1hDLE9BQVMsbUNBR2hCLFNBQU9DLEVBQU1DLEVBQVVDLFFBQ2hCUixHQUFHUyxVQUFZRixFQUFTRCxRQUN4QkYsU0FBU00sU0FBUSxTQUFBQyxHQUNwQkEsRUFBRUMsb0JBRUNSLFNBQVcsK0JBR2xCLFNBQWFTLEVBQUlMLGNBQ1RNLEVBQU1DLEtBQUtmLEdBQUdnQixpQkFBaUIsd0JBQ2hDRixJQUFRQSxFQUFJRyxPQUNmLE9BQU9KLFFBRUhLLEVBQU1KLEVBQUlHLE9BQ1pFLEVBQWEsRUFDakJMLEVBQUlKLFNBQVEsU0FBQVYsT0FDSkQsRUFBT0MsRUFBR29CLGFBQWEsa0JBRXZCVCxFQUFJLElBQUlVLEVBREF4QixFQUFzQkUsSUFDaEJBLEVBQU1DLEVBQUlzQixFQUFLckIsSUFBS3FCLEdBQ3hDQSxFQUFLbEIsU0FBU21CLEtBQUtaLEdBQ25CQSxFQUFFYSxNQUFLLGFBQ0NMLElBQWVELEdBQ25CTCxNQUNETCwwQkFJUCxTQUFLSyxFQUFJTCxjQUNQQSxFQUFRQSxHQUFTLFFBQ1pMLFVBQVcsT0FDWHNCLFNBQVEsU0FBQW5CLEdBQ1hvQixFQUFLQyxPQUFPckIsRUFBTW9CLEVBQUtuQixTQUFVQyxHQUNqQ2tCLEVBQUtFLFVBQVMsV0FDWkYsRUFBS0csY0FBYSxXQUNoQkgsRUFBS3ZCLFVBQVcsRUFDWlUsR0FBSUEsTUFDUEwsS0FDRkEsS0FDRkEsNEJBR0wsMkJBQ09KLFNBQVNNLFNBQVEsU0FBQUMsR0FDcEJBLEVBQUVDLG9CQUVDUixTQUFXLFFBQ1hDLE9BQU9LLFNBQVEsU0FBQW9CLEdBQ2xCQyxFQUFLOUIsSUFBSStCLElBQUlGLEVBQU9DLFdBRWpCMUIsT0FBUyxxQkFHaEIsU0FBR3lCLEVBQU9qQixRQUNIWixJQUFJZ0MsR0FBR0gsRUFBT2pCLEVBQUlFLFdBQ2xCVixPQUFPa0IsS0FBS08sMEJBSW5CLFNBQVFqQixHQUNGQSxHQUFJQSxFQUFHRSxLQUFLVCxNQUFRLDRCQUcxQixTQUFTTyxHQUNIQSxHQUFJQSxpQkMxRVNxQix3QkFDUG5DLGtCQUNMQSxLQUFPQSxPQUNQTSxPQUFTLGtDQUdoQixTQUFNTCxFQUFJUSxjQUVSMkIsT0FBT0MsaUJBQWlCLFlBQVksU0FBQ0MsR0FDbkNmLEVBQUtnQixRQUFRLFdBQVlELE1BRWQsSUFBSXZDLEVBQVUsR0FBSUUsRUFBSWUsTUFDOUJjLGNBQWEsY0FBVXJCLDBCQUc5QixTQUFRc0IsRUFBT3hCLEVBQU1pQyxNQUNiVCxLQUFTZixLQUFLVixXQUVmLElBQUltQyxLQUFLekIsS0FBS1YsT0FBT3lCLFFBQ25CekIsT0FBT3lCLEdBQU9VLEdBQUdWLEVBQU94QixFQUFNaUMscUJBSXZDLFNBQUdULEVBQU9qQixFQUFJNEIsR0FDTlgsS0FBU2YsS0FBS1YsU0FDbEJVLEtBQUtWLE9BQU95QixHQUFTLFNBQ2xCekIsT0FBT3lCLEdBQU9XLEdBQWM1QixxQkFHbkMsU0FBSWlCLEVBQU9XLE1BQ0hYLEtBQVNmLEtBQUtWLFlBRWRxQyxFQUFjM0IsS0FBS1YsT0FBT3lCLFVBQ3pCWSxFQUFZRCxHQUNRLElBQXZCQyxFQUFZekIsZUFDUEYsS0FBS1YsT0FBT3lCLG1CQ2xDVixDQUViN0IsSUFBSyxTQUFDRixVQUNHLElBQUltQyxFQUFJbkMsSUFFakI0QyxVRndFSyxTQUEyQjVDLEVBQU02QyxPQUNoQ0MsNlFBQ1E5QyxFQUFNQyxFQUFJRSx3Q0FDZEgsRUFBTUMsRUFBSUUsR0FDWjBDLEVBQUlyQyxhQUNEQSxTQUFXcUMsRUFBSXJDLFVBRWxCcUMsRUFBSUUsTUFDTkYsRUFBSUUsS0FBS0MsVUFBVEgsR0FFRUEsRUFBSW5CLFlBQ0RBLFFBQVVtQixFQUFJbkIsUUFBUXNCLFlBRXpCSCxFQUFJaEIsYUFDREEsU0FBV2dCLEVBQUloQixTQUFTbUIsd0JBYlRqRCxHQWlCMUJELEVBQXNCRSxHQUFROEMifQ==
