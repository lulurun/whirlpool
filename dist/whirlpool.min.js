/**
   * @license
   * W.js v1.0.0
   * Released under the MIT License.
   */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).W=e()}(this,(function(){"use strict";function t(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function e(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function n(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}function r(t){return r=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},r(t)}function i(t,e){return i=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},i(t,e)}function o(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function u(t,e){if(e&&("object"==typeof e||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return o(t)}function c(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=r(t);if(e){var o=r(this).constructor;n=Reflect.construct(i,arguments,o)}else n=i.apply(this,arguments);return u(this,n)}}function a(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function s(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return a(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?a(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,u=!0,c=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return u=t.done,t},e:function(t){c=!0,o=t},f:function(){try{u||null==n.return||n.return()}finally{if(c)throw o}}}}var f="data-component",l={},h=function(){function e(n,r,i,o){t(this,e),this.name=n,this.el=r,this.app=i,this.parent=o,this.complete=!1,this.children=[],this.topics=[]}return n(e,[{key:"render",value:function(t,e){this.el.innerHTML=e(t),this.children.forEach((function(t){t.destroyed()})),this.children=[]}},{key:"loadChildren",value:function(t,e){var n=this,r=this.el.querySelectorAll("[data-component]");if(!r||!r.length)return t();var i=r.length,o=0;r.forEach((function(r){var u=r.getAttribute(f);if(u in l){var c=new(0,l[u])(u,r,n.app,n);n.children.push(c),c.load((function(){++o===i&&t()}),e)}else++o===i&&t()}))}},{key:"load",value:function(t,e){var n=this;e=e||{},this.complete=!1,this.getData((function(r){n.render(r,n.template),n.rendered((function(){n.loadChildren((function(){n.complete=!0,t&&t()}),e)}),e)}),e)}},{key:"destroyed",value:function(){var t=this;this.children.forEach((function(t){t.destroyed()})),this.children=[],this.topics.forEach((function(e){t.app.unsubscribe(e,t)})),this.topics=[]}},{key:"subscribe",value:function(t,e){this.app.subscribe(t,e,this),this.topics.push(t)}},{key:"publish",value:function(t,e){this.app.publish(t,e,this)}},{key:"getData",value:function(t){t&&t(this.data||{})}},{key:"rendered",value:function(t){t&&t()}}]),e}();function p(t,e){return t.has(e)||t.set(e,{subscribers:new Map}),t.get(e)}var d=function(){function e(n){t(this,e),this.name=n,this.topics=new Map}return n(e,[{key:"start",value:function(t,e){var n=this;window.addEventListener("popstate",(function(t){n.publish("popstate",t)})),new h("",t,this).loadChildren((function(){}),e)}},{key:"publish",value:function(t,e,n){var r,i=p(this.topics,t),o=s(i.subscribers.values());try{for(o.s();!(r=o.n()).done;){(0,r.value)(e,n)}}catch(t){o.e(t)}finally{o.f()}i.data=e,i.publisher=n}},{key:"subscribe",value:function(t,e,n){var r=p(this.topics,t);r.subscribers.set(n,e),r.publisher&&e(r.data,r.publisher)}},{key:"unsubscribe",value:function(t,e){this.topics.has(t)&&this.topics.get(t).subscribers.delete(e)}}]),e}();return{app:function(t){return new d(t)},component:function(e,n){var r=function(e){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&i(t,e)}(u,e);var r=c(u);function u(e,i,c,a){var s;return t(this,u),(s=r.call(this,e,i,c,a)).template=n.template||function(){return""},n.init&&n.init.bind(o(s))(),n.getData&&(s.getData=n.getData.bind(o(s))),n.rendered&&(s.rendered=n.rendered.bind(o(s))),s}return u}(h);l[e]=r}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
